//位运算

public class BitOperator{
	public static void main(String[] args){

		//推导
		//1.先得到2的原码->2的补码 00000000 00000000 00000000 00000010 4个字节
		//2.再得到3的原码->3的补码 00000000 00000000 00000000 00000011
		//正数 原码，反码，补码相同
		//运算过后的补码 00000000 00000000 00000000 00000010
		//再转为原码 00000000 00000000 00000000 00000010
		//转为十进制为2
		System.out.println(2&3);
		//先得到-2的原码 ：10000000 00000000 00000000 00000010
		//再得到-2的反码 ：11111111 11111111 11111111 11111101
		//再得到-2的补码 ：11111111 11111111 11111111 11111110
		//再取反~-2的补码 :00000000 00000000 00000000 00000001
		//再得到~-2的原码 :00000000 00000000 00000000 00000001
		//转为十进制为1
		System.out.println(~-2);
		//先得到2的原码 ：00000000 00000000 00000000 00000010
		//再得到2的补码 ：00000000 00000000 00000000 00000010
		//再取反~2的补码 :11111111 11111111 11111111 11111101
		//再得到~2的反码 :11111111 11111111 11111111 11111100
		//再得到~2的原码 ：10000000 00000000 00000000 00000011 
		//结果 -3
		System.out.println(~2);
		//1.先得到2的原码->2的补码 00000000 00000000 00000000 00000010 4个字节
		//2.再得到3的原码->3的补码 00000000 00000000 00000000 00000011
		//正数 原码，反码，补码相同
		//运算过后的补码 00000000 00000000 00000000 00000011
		//再转为原码 00000000 00000000 00000000 00000011
		//转为十进制为3
		System.out.println(2|3);
		//1.先得到2的原码->2的补码 00000000 00000000 00000000 00000010 4个字节
		//2.再得到3的原码->3的补码 00000000 00000000 00000000 00000011
		//正数 原码，反码，补码相同
		//运算过后的补码 00000000 00000000 00000000 00000001
		//再转为原码 00000000 00000000 00000000 00000001
		//转为十进制为1
		System.out.println(2^3);
		System.out.println(1>>2);// 1/2/2=0
		System.out.println(4<<3);// 4*2*2*2=32


	}
}